{
  "parser": "@typescript-eslint/parser",
  "extends": [
    "plugin:compat/recommended",
    "plugin:react-perf/recommended",
    "plugin:jest/recommended",
    "eslint:recommended",
    "plugin:react/recommended",
    "plugin:import/errors",
    "plugin:import/warnings",
    "plugin:import/typescript",
    "plugin:react-hooks/recommended",
    "plugin:markdown/recommended",
    "plugin:jsonc/base",
    "plugin:@typescript-eslint/recommended", // Uses the recommended rules from the @typescript-eslint/eslint-plugin
    "plugin:prettier/recommended" // Make sure this is always the last configuration in the extends array. Enables eslint-plugin-prettier and
  ],
  "plugins": [
    "simple-import-sort",
    "import",
    "jest",
    "prettier",
    "@typescript-eslint",
    "react-hooks",
    "react",
    "react-perf",
    "no-secrets"
  ],
  "parserOptions": {
    "sourceType": "module", // Allows for the use of imports
    "ecmaFeatures": {
      "jsx": true // Allows for the parsing of JSX,
    }
  },
  "settings": {
    "import/parsers": {
      "@typescript-eslint/parser": [".ts", ".tsx"]
    },
    "import/resolver": {
      "typescript": {
        "alwaysTryTypes": true // always try to resolve types under `<root>@types` directory even it doesn't contain any source code, like `@types/unist`
      }
    },
    "react": {
      "version": "detect" // Tells eslint-plugin-react to automatically detect the version of React to use
    }
  },
  "env": {
    "jest/globals": true,
    "browser": true,
    "node": true,
    "es6": true
  },
  "rules": {
    "@typescript-eslint/no-unused-vars": ["warn"],
    "@typescript-eslint/explicit-function-return-type": "off",
    "no-console": "warn",
    "no-extra-semi": "error",
    "simple-import-sort/imports": [
      "error",
      {
        "groups": [
          // Node.js builtins. You could also generate this regex if you use a `.js` config.
          // For example: `^(${require("module").builtinModules.join("|")})(/|$)`
          [
            "^(assert|buffer|child_process|cluster|console|constants|crypto|dgram|dns|domain|events|fs|http|https|module|net|os|path|punycode|querystring|readline|repl|stream|string_decoder|sys|timers|tls|tty|url|util|vm|zlib|freelist|v8|process|async_hooks|http2|perf_hooks)(/.*|$)"
          ],
          // Packages. `react` related packages come first.
          ["^react", "^@?\\w"],
          // Internal packages.
          ["^(@|app|components|config|constants|i18n|models|pages|services|signalr|theme|utils|vendored-lib)(/.*|$)"],
          // Side effect imports.
          ["^\\u0000"],
          // Parent imports. Put `..` last.
          ["^\\.\\.(?!/?$)", "^\\.\\./?$"],
          // Other relative imports. Put same-folder imports and `.` last.
          ["^\\./(?=.*/)(?!/?$)", "^\\.(?!/?$)", "^\\./?$"],
          // Style imports.
          ["^.+\\.s?css$"]
        ]
      }
    ],
    "simple-import-sort/exports": "error",
    "import/first": "error",
    "import/newline-after-import": "error",
    "import/no-duplicates": "error",
    "import/no-unresolved": "error", // turn on errors for missing imports
    "no-restricted-imports": [
      "error",
      {
        "paths": [
          {
            "name": "styled-components",
            "message": "Please import from styled-components/macro."
          }
        ],
        "patterns": ["!styled-components/macro"]
      }
    ],
    "no-secrets/no-secrets": ["error", { "tolerance": 5 }],
    "react/jsx-sort-props": [
      "warn",
      {
        "callbacksLast": true,
        "shorthandFirst": true,
        "ignoreCase": true,
        "noSortAlphabetically": false,
        "reservedFirst": true
      }
    ],
    "prefer-destructuring": "warn",
    "react-hooks/rules-of-hooks": "warn", // Checks rules of Hooks
    "react-hooks/exhaustive-deps": "warn", // Checks effect dependencies
    "react/prop-types": "off",
    "react-perf/jsx-no-new-object-as-prop": "warn", // ! TODO: bör vara "error"
    "react-perf/jsx-no-new-function-as-prop": "warn", // TODO: bör vara "error"
    "react-perf/jsx-no-new-array-as-prop": "warn", // TODO: bör vara "error"
    "react/jsx-uses-react": "off",
    "react/react-in-jsx-scope": "off"
  },
  "overrides": [
    {
      "files": ["*.test.ts", "*.test.tsx"],
      "rules": {
        "react-perf/jsx-no-new-function-as-prop": "off"
      }
    }
  ]
}
